@model InsuranceClaim.Models.DomesticRiskDetailModel
@{
    ViewBag.Title = "Risk Detail";
    Layout = "~/Views/Shared/_InsuranceMain.cshtml";
    var customerDetail = (InsuranceClaim.Models.CustomerModel)Session["CustomerDataModal"];
}


<div class="top-banner-section">
    <div class="container">
        <div class="car-insurance-content">
            <h2>Get Car Insurance In Less<br>Than 5 Minutes</h2>
        </div>
    </div>
</div>
<div class="body-content-section">
    <div class="form-section-top">
        <div class="container">
            <div class="row bs-wizard">
                <div class="col-xs-12 col-sm-12 col-md-2 col-lg-2">
                    <div class="Process-step-section process-block">
                        <div class="col-sm-12 bs-wizard-step complete">
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Client Details</div>
                        </div>


                        <div class="col-sm-12 bs-wizard-step active">
                            <!-- complete -->
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Risk Details</div>
                        </div>

                        <div class="col-sm-12 bs-wizard-step disabled">
                            <!-- active -->
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Summary Details</div>
                        </div>

                        <div class="col-sm-12 bs-wizard-step disabled">
                            <!-- active -->

                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Payment Details</div>
                        </div>
                    </div>
                </div>



                <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10 form-section-col">
                    @using (Html.BeginForm("GenerateQuote", "Domestic"))
                    {
                        <div>
                            @Html.HiddenFor(m => m.PolicyId)
                            @Html.HiddenFor(m => m.Id)
                            @Html.HiddenFor(m => m.isUpdate)
                            @Html.HiddenFor(m => m.vehicleindex)
                        </div>
                        <div class="form-group-section">
                            <div class="form-title">
                                <h4>Risk Details </h4>
                                <br />
                                <span> Corporate Name: <b>@customerDetail.CompanyName  </b>,  Email: <b>@customerDetail.CompanyEmail </b>  </span>
                            </div>

                            <div>
                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-select">
                                        <div class="form-group">
                                            @Html.Label("Product", new { @class = "gender-label" })
                                            @Html.DropDownListFor(x => x.ProductId, new SelectList(ViewBag.Products, "Id", "ProductName"), new { @class = "form-control", @readonly = "readonly" })
                                            @Html.ValidationMessageFor(x => x.ProductId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-select">
                                        <div class="form-group">
                                            @Html.Label("Risk Cover", new { @class = "gender-label" })
                                            @Html.DropDownListFor(x => x.RiskCoverId, new List<SelectListItem>(), new { @class = "form-control", id = "RiskCover", @onchange = "ddlRiskCoverChanged();" })
                                            @Html.ValidationMessageFor(x => x.RiskCoverId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-select">
                                        <div class="form-group">
                                            @Html.Label("Risk Item", new { @class = "gender-label" })
                                            @Html.DropDownListFor(x => x.RiskItemId, new List<SelectListItem>(), new { @class = "form-control", @disabled = "disabled", @onchange = "ddlRiskItemChanged();" })
                                            @Html.ValidationMessageFor(x => x.RiskItemId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.Label("Risk Address", new { @class = "gender-label" })
                                            @Html.TextBoxFor(m => m.RiskAddress, new { @class = "form-control", @autocomplete = "off", @placeholder = "Risk Address" })
                                            @Html.ValidationMessageFor(x => x.RiskAddress, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-select">
                                        <div class="form-group">
                                            @Html.Label("Payment Term", new { @class = "gender-label" })
                                            @Html.DropDownListFor(x => x.PaymentTermId, new SelectList(ViewBag.PaymentTermId, "Id", "Name"), "Select Payment Term", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(x => x.PaymentTermId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-select">
                                        <div class="form-group">
                                            @Html.Label("Payment Type", new { @class = "gender-label" })
                                            @Html.DropDownListFor(x => x.PaymentTypeId, new SelectList(ViewBag.PaymentMethods, "Id", "Name"), "Select Payment Type", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(m => m.PaymentTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.Label("Cover Amount", new { @class = "gender-label" })
                                            @Html.TextBoxFor(m => m.CoverAmount, new { @class = "form-control", @autocomplete = "off", @placeholder = "Cover amount", @onblur = "CalculatePremium()", @type = "number" })
                                            @Html.ValidationMessageFor(x => x.CoverAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.Label("Rate", new { @class = "gender-label" })
                                            @Html.TextBoxFor(m => m.Rate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Rate", @readonly = "readonly" })
                                            @Html.ValidationMessageFor(x => x.Rate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.Label("Notes", new { @class = "gender-label" })
                                            @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", @autocomplete = "off", @placeholder = "Notes", @style = "resize:none;height: 70px;" })
                                            @Html.ValidationMessageFor(x => x.Notes, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <hr class="higlighter" />

                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.Label("Cover Start Date", new { @class = "gender-label" })
                                            <div class='input-group' id='datetimepicker1'>
                                                @Html.TextBoxFor(m => m.CoverStartDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Cover Start Date" })
                                                @Html.ValidationMessageFor(m => m.CoverStartDate, "", new { @class = "text-danger" })
                                                <span class="input-group-addon">
                                                    <span class="glyphicon glyphicon-calendar"></span>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.Label("Cover End Date", new { @class = "gender-label" })
                                            <div class='input-group' id='datetimepicker2'>
                                                @Html.TextBoxFor(m => m.CoverEndDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Cover End Date" })
                                                @Html.ValidationMessageFor(m => m.CoverEndDate, "", new { @class = "text-danger" })
                                                <span class="input-group-addon">
                                                    <span class="glyphicon glyphicon-calendar"></span>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.Label("Basic Premium", new { @class = "gender-label" })
                                                @Html.TextBoxFor(m => m.BasicPremium, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Basic Premium", @readonly = "readonly" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.Label("Stamp Duty", new { @class = "gender-label" })
                                                @Html.TextBoxFor(m => m.StampDuty, new { @class = "form-control", @autocomplete = "off", @placeholder = "Stamp Duty", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(m => m.StampDuty, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.Label("Premium Due", new { @class = "gender-label" })
                                                @Html.TextBoxFor(m => m.Premium, new { @class = "form-control", @autocomplete = "off", @placeholder = " Premium Due", @readonly = "readonly" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr class="higlighter" />

                            <div class="row">
                                <div class="col-md-12 next-btn">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6">
                                            <div class="text-left">
                                                <div class="back-left"><button type="button" onclick="gotoPeriviouse()" class="btn">Back</button></div>
                                                <a style="display:none" id="previouselink" href="/CustomerRegistration/ProductDetail" class="back"></a>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6">
                                            <div class="text-right">
                                                <button type="submit" id="btnGenerateQuote" class="btn" style="padding:20px 10px;width: auto;">Submit & Generate Quote</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        </div>
                    }
                </div>

            </div>
        </div>
    </div>

    

</div>
<script type="text/javascript">
    $(document).ready(function () {
        //BindRiskItem();
        $("#RiskCover").append($("<option />").val("").text("Select Risk Cover"));
        $("#RiskItemId").append($("<option />").val("").text("Select Risk Item"));
        if (('@Model.isUpdate' == 'True')) {
            $('#RiskItemId').removeAttr("disabled");
            $("#PaymentTermId").val(@Model.PaymentTermId);
            BindRiskCover(true);
        }
        else {
            BindRiskCover();
        }
    });

    function CalculatePremium() {
        debugger;
        var product = $("#ProductId").val();
        var riskItem = $("#RiskItemId").val();
        var coverAmount = $("#CoverAmount").val();

        if (coverAmount != "") {
            if (product == "" && riskItem == "") {
                toastr.warning("Please select produt and risk item.");
                return false;
            }
            else {
                callQuoteCalculation(coverAmount)
            }
        }
    }
    function callQuoteCalculation(coverAmount) {
        debugger;

        var ProductId = $("#ProductId").val();

        
        var RiskItemId = parseInt($("#RiskItemId").val());
        if (RiskItemId < 1) {
            return false;
        }
        
        var paymenttermid = $("#PaymentTermId").val();
        if (paymenttermid < 1)
            return false;
        
        var rate = $("#Rate").val();
        if (rate=="")
            return false;


        if (coverAmount < 1) {
            return false;
        }

        $.ajax({
            type: "POST",
            url: "@Url.Action("CalculatePremiumCorporate", "Domestic")",
            data: { InsuranceRate: rate, CoverAmount: coverAmount, PaymentTermid: paymenttermid },
            success: function (data) {
                debugger;
                $("#BasicPremium").val(parseFloat(data.Premium).toFixed(2));
                $("#StampDuty").val(parseFloat(data.StamDuty).toFixed(2));

                var PremiumDueAmount = parseFloat(data.Premium) + parseFloat(data.StamDuty);

                $("#Premium").val(PremiumDueAmount);


                if (data.Status == false) {
                    toastr.warning(data.Message);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (textStatus == 'timeout') {
                } else if (textStatus == 'error') {
                }
            }
        });

    }

    function BindRiskCover(isback) {
        debugger;
        $.ajax({
            url: "@Url.Action("GetRiskCover", "Domestic")",
            type: "GET",
            data: { ProductId: $("#ProductId").val() },
            dataType: "json",
            success: function (result) {
                debugger;
                var $dropdown = $("#RiskCover");
                $dropdown.empty();
                $dropdown.append($("<option />").val("").text("Select Risk Cover"));
                $.each(result, function () {
                    $dropdown.append($("<option />").val(this.Id).text(this.RiskCover));
                });
                if (isback == true) {
                    $("#RiskCover").val(@Model.Id);
                    ddlRiskCoverChanged(true);
                }
            },
            error: function (status, error) {
                debugger;
            }
        });
    }

    function ddlProductChanged() {
        BindRiskCover();
        $('#RiskCover').removeAttr("disabled");
    }

    function ddlRiskCoverChanged(isback) {
        debugger;
        $('#RiskItemId').removeAttr("disabled");
        $.ajax({
            url: "@Url.Action("GetRiskItem", "Domestic")",
            type: "GET",
            data: { RiskId: $("#RiskCover").val() },
            dataType: "json",
            success: function (result) {
                debugger;
                var $dropdown = $("#RiskItemId");
                $dropdown.empty();
                $dropdown.append($("<option />").val("").text("Select Risk Cover"));
                $.each(result, function () {
                    $dropdown.append($("<option />").val(this.Id).text(this.RiskItem));
                });
                if (isback == true) {
                    $("#RiskItemId").val(@Model.Id);
                }
            },
            error: function (status, error) {
                debugger;
            }
        });

        CalculatePremium();
    }

    function ddlRiskItemChanged() {
        debugger;
        $.ajax({
            url: "@Url.Action("GetRate", "Domestic")",
            type: "GET",
            data: { RiskId: $("#RiskItemId").val() },
            success: function (result) {
                debugger;
                $("#Rate").val(result);
            },
            error: function (status, error) {
                debugger;
            }
        });
        CalculatePremium();
    }

    function gotoPeriviouse() {
        location.href = '@Url.Action("Index", "Domestic", new { id=-1 })';
    }

    function redirectToSummary() {
        location.href = '@Url.Action("SummaryDetail", "Domestic")';
    }

    $("#PaymentTermId").change(function () {
        var selectedTerm = $("#PaymentTermId option:selected").val();
        switch (parseInt(selectedTerm)) {
            case 1:
                setPolicyEndDate(12);
                break;
            case 2:
                setPolicyEndDate(1)
                break;
            case 3:
                setPolicyEndDate(3);
                break;
            case 4:
                setPolicyEndDate(4);
                break;
            case 5:
                setPolicyEndDate(5)
                break;
            case 6:
                setPolicyEndDate(6);
                break;
            case 7:
                setPolicyEndDate(7);
                break;
            case 8:
                setPolicyEndDate(8)
                break;
            case 9:
                setPolicyEndDate(9);
                break;
            case 10:
                setPolicyEndDate(10);
                break;

            case 11:
                setPolicyEndDate(11);
                break;
        }
        CalculatePremium();

    });

    function setPolicyEndDate(numberOfMonth) {
        //debugger;
        today = $('#datetimepicker1').data('DateTimePicker').date()._d;//new Date();
        today.setMonth(today.getMonth() + numberOfMonth);

        var dd = "";
        if (today.getDate() == 1) {
            today = new Date(today.getFullYear(), today.getMonth(), 0);
            dd = today.getDate();
        }
        else {
            dd = today.getDate() - 1;
        }
        var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;
        $("#CoverEndDate").val(today);
        //debugger;
        var dateParts = today.split("/");
        today = new Date(dateParts[2], dateParts[0] - 1, dateParts[1]);
        today.setDate(today.getDate() + 1);
        dd = today.getDate();
        mm = today.getMonth() + 1; //January is 0!

        yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;

        $("#RenewalDate").val(today);
    }
</script>

<script type="text/javascript">
    var today;
    function updateEndDate() {
        debugger;
        var selectedTerm = $("#PaymentTermId option:selected").val();
        switch (parseInt(selectedTerm)) {
            case 1:
                setPolicyEndDate(12);
                break;
            case 2:
                setPolicyEndDate(1)
                break;
            case 3:
                setPolicyEndDate(3);
                break;
            case 4:
                setPolicyEndDate(4);
                break;
            case 5:
                setPolicyEndDate(5)
                break;
            case 6:
                setPolicyEndDate(6);
                break;
            case 7:
                setPolicyEndDate(7);
                break;
            case 8:
                setPolicyEndDate(8)
                break;
            case 9:
                setPolicyEndDate(9);
                break;
            case 10:
                setPolicyEndDate(10);
                break;
            case 11:
                setPolicyEndDate(11)
                break;

        }
    }

    $(document).ready(function () {

        $("#datetimepicker2").datetimepicker({
            format: 'MM/D/YYYY',
            minDate: new Date()
        })
        $("#datetimepicker1").datetimepicker({
            format: 'MM/D/YYYY',
            minDate: new Date()
        }).on('dp.change', function (e) {
            debugger;
            var incrementDay = moment(new Date(e.date));
            incrementDay.add(1, 'days');
            $('#datetimepicker2').data('DateTimePicker').minDate(incrementDay);
            $(this).data("DateTimePicker").hide();
            updateEndDate();
        });

        var data = '@Model.isUpdate';
        if (data == 'True') {
            $("#CoverEndDate").val('@(Model.CoverEndDate != null ? Model.CoverEndDate.Value.ToString("MM/dd/yyyy") : DateTime.Now.ToString("MM/dd/yyyy"))');

        }

        today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;

        $("#CoverStartDate").val(today);
    });

</script>

