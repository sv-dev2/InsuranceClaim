@model InsuranceClaim.Models.EndorsementRiskDetailModel
@{
    ViewBag.Title = "EndorsementRiskDetails";
    Layout = "~/Views/Shared/_InsuranceMain.cshtml";
    var customerDetail = (InsuranceClaim.Models.CustomerModel)Session["CustomerDataModal"];
}

<div class="top-banner-section">
    <div class="container">
        <div class="car-insurance-content">
            <h2>Get Car Insurance In Less<br>Than 5 Minutes<h2>
        </div>
    </div>
</div>
<div class="body-content-section">


    <div class="form-section-top">
        <div class="container">

            <div class="row bs-wizard">

                <div class="col-xs-12 col-sm-12 col-md-2 col-lg-2">
                    <div class="Process-step-section process-block">

                        <div class="col-xs-2 bs-wizard-step complete">
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Client Details</div>
                        </div>


                        <div class="col-xs-2 bs-wizard-step active">
                            <!-- complete -->
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Risk Details</div>
                        </div>

                        <div class="col-xs-2 bs-wizard-step disabled">
                            <!-- active -->
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Summary Details</div>
                        </div>

                        <div class="col-xs-2 bs-wizard-step disabled">
                            <!-- active -->

                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Payment Details</div>
                        </div>

                    </div>
                </div>

                <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10 form-section-col">

                    @using (Html.BeginForm("SaveEndorsementRiskDetails", "Endorsement"))
                    {
                        <div>
                            @Html.HiddenFor(m => m.PolicyId)
                            @Html.HiddenFor(m => m.Id)
                            @Html.HiddenFor(m => m.EndorsementVehicleId)

                            @Html.HiddenFor(m => m.VehicleId)
                            @Html.HiddenFor(m => m.isUpdate)
                            @Html.HiddenFor(m => m.vehicleindex)
                            @Html.HiddenFor(m => m.PassengerAccidentCoverAmount)
                            @Html.HiddenFor(m => m.ExcessBuyBackAmount)
                            @Html.HiddenFor(m => m.MedicalExpensesAmount)
                            @Html.HiddenFor(m => m.RoadsideAssistanceAmount)
                            @Html.HiddenFor(m => m.PassengerAccidentCoverAmountPerPerson)
                            @Html.HiddenFor(m => m.ExcessBuyBackPercentage)
                            @Html.HiddenFor(m => m.RoadsideAssistancePercentage)
                            @Html.HiddenFor(m => m.MedicalExpensesPercentage)
                            @Html.HiddenFor(m => m.ExcessAmount)
                            @Html.HiddenFor(m => m.AnnualRiskPremium)
                            @Html.HiddenFor(m => m.QuaterlyRiskPremium)
                            @Html.HiddenFor(m => m.TermlyRiskPremium)

                            @Html.HiddenFor(m => m.ErrorMessage)

                            @Html.Hidden("isVehicleRegisteredonICEcash")
                            @Html.Hidden("basicPremiumICEcash")
                            @Html.Hidden("stampDutyICEcash")
                            @Html.Hidden("LevyICEcash")
                            @Html.HiddenFor(x => x.EndorsementCustomerId)
                            @Html.HiddenFor(x => x.EndorsementPolicyId)
                            @Html.HiddenFor(x => x.Id)
                            @Html.HiddenFor(x => x.PrimaryVehicleId)
                            @Html.HiddenFor(x => x.CreatedOn)
                            @Html.HiddenFor(x => x.CreatedBy)
                            @Html.HiddenFor(x => x.BalanceAmount)
                            @Html.HiddenFor(m => m.InsuranceId)
                            @Html.HiddenFor(m => m.CombinedID)

                        </div>
                        <div class="form-group-section">
                            <div class="form-title">
                                <h4>Endorsement Risk Details</h4>
                                <br />
                                @*<span> Name: <b>@customerDetail.FirstName  @customerDetail.LastName </b>,  Email: <b>@customerDetail.EmailAddress </b>  </span>*@
                            </div>

                            <div id="divVehicleList" style="display:block;">
                                <table class="table table-striped" id="tblVehicleList">
                                    <thead>
                                        <tr>
                                            <th>Make</th>
                                            <th>Model</th>
                                            <th>Cover Type</th>
                                            <th>Currency</th>
                                            <th>Sum Insured</th>
                                            <th>Premium</th>
                                            <th style="text-align: center;">Option(s)</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                    <tfoot style="background: white;font-weight:bold;">
                                        <tr><td colspan="5">Total Premium</td><td colspan="2" id="tdTotalPremium">0.00</td></tr>
                                    </tfoot>
                                </table>
                                <hr class="higlighter" />
                            </div>

                            <div class="form-group-input">
                                <div id="contact-form" class="contact-form">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.Label("Vehicle Number", new { @class = "gender-label" })
                                                @Html.TextBoxFor(m => m.NoOfCarsCovered, new { @placeholder = "Vehicle Number", @autocomplete = "off", @class = "form-control", @maxlength = "2", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(m => m.NoOfCarsCovered, "", new { @class = "text-danger" })
                                                @Html.ValidationMessageFor(m => m.NoOfCarsCovered, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.Label("Registration No", new { @class = "gender-label" })
                                                @Html.TextBoxFor(m => m.RegistrationNo, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Registration Number" })
                                                @Html.ValidationMessageFor(m => m.RegistrationNo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-select">

                                            <div class="form-group">
                                                @Html.Label("Payment Term", new { @class = "gender-label" })
                                                @Html.DropDownListFor(x => x.PaymentTermId, ViewBag.ePaymentTermData as SelectList, "Select Payment Term", new { @class = "form-control" })
                                                @*@Html.DropDownListFor(x => x.PaymentTermId, new SelectList(ViewBag.PaymentTermId, "Id", "Name"), "Select Payment Term", new { @class = "form-control" })*@
                                                @Html.ValidationMessageFor(x => x.PaymentTermId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6 form-group-select">
                                            <div class="form-group">
                                                @*@Html.TextBoxFor(x => x.PolicyName, new { @class = "form-control", @autocomplete = "off", @placeholder = "Policy Name" })*@
                                                @Html.Label("Product", new { @class = "gender-label" })
                                                @Html.DropDownListFor(x => x.ProductId, new SelectList(ViewBag.Products, "Id", "ProductName"), "Select Product Type", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(x => x.ProductId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <fieldset @(Model.isUpdate ? "" : "disabled")>
                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Vehicle Usage", new { @class = "gender-label" })


                                                    @Html.DropDownListFor(x => x.VehicleUsage, new SelectList(ViewBag.VehicleUsage, "Id", "VehUsage"), "Select Vehicle Usage", new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Cover Type", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.CoverTypeId, new SelectList(ViewBag.CoverType, "id", "Name"), "Select Cover Type", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.CoverTypeId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>

                                        <hr class="higlighter" />

                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div id="thirdpartycheck" class="form-group">
                                                    @Html.Label("Include VehicleLicence Fee", new { @class = "gender-label" })
                                                    @Html.CheckBoxFor(x => x.IncludeLicenseFee, new { @style = "width: 40px;height: 36px;", onclick = "ClearLicenseIfNotChek();" })
                                                </div>
                                            </div>

                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div id="thirdpartycheck" class="form-group">
                                                    @Html.Label("Include Radio License Cost", new { @class = "gender-label" })
                                                    @Html.CheckBoxFor(x => x.IncludeRadioLicenseCost, new { @style = "width: 40px;height: 36px;", onclick = "GetRadioLicenseCost();" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">

                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Vehicle Licence Payment Term", new { @class = "gender-label" })
                                                    @*@Html.DropDownListFor(x => x.PaymentTermId, ViewBag.ePaymentTermData as SelectList, "Select Payment Term", new { @class = "form-control" })*@
                                                    @Html.DropDownListFor(x => x.ZinaraLicensePaymentTermId, new SelectList(ViewBag.VehicleLicensePaymentTermId, "Id", "Name"), "Select Payment Term", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.ZinaraLicensePaymentTermId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Radio License Payment Term", new { @class = "gender-label" })
                                                    @*@Html.DropDownListFor(x => x.PaymentTermId, ViewBag.ePaymentTermData as SelectList, "Select Payment Term", new { @class = "form-control" })*@
                                                    @Html.DropDownListFor(x => x.RadioLicensePaymentTermId, new SelectList(ViewBag.RadioLicensePaymentTermId, "Id", "Name"), "Select Payment Term", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.RadioLicensePaymentTermId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>


                                        <hr class="higlighter" />

                                        <div class="row">
                                            <div class="col-sm-12 col-md-12 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("TaxClass", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.TaxClassId, new SelectList(ViewBag.TaxClass, "TaxClassId", "Description"), "Select Tax Class", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.TaxClassId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Suggested Value", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.SuggestedValue, new { @class = "form-control", @autocomplete = "off", @placeholder = "Suggested Value", @maxlength = "5" })
                                                    @*@Html.ValidatiVehicleSumInsuresonMessageFor(m => m.SumInsured, "", new { @class = "text-danger" })*@
                                                    @* @Html.ValidationMessageFor(m => m.SumInsured, "", new { @class = "text-danger" })*@

                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Sum Insured", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.SumInsured, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Sum Insured", @maxlength = "11" })
                                                    <span class="text-danger" id="validationSumIns">Please Enter Sum Insured</span>
                                                    @*@Html.ValidationMessageFor(m => m.SumInsured, "", new { @class = "text-danger" })*@
                                                    @*@Html.ValidationMessageFor(m => m.SumInsured, "", new { @class = "text-danger" })*@
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Cover Start Date", new { @class = "gender-label" })
                                                    <div class='input-group' id='datetimepicker1'>
                                                        @Html.TextBoxFor(m => m.CoverStartDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Cover Start Date" })
                                                        @Html.ValidationMessageFor(m => m.CoverStartDate, "", new { @class = "text-danger" })
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>

                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Cover End Date", new { @class = "gender-label" })
                                                    <div class='input-group' id='datetimepicker2'>
                                                        @Html.TextBoxFor(m => m.CoverEndDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Cover End Date" })
                                                        @Html.ValidationMessageFor(m => m.CoverEndDate, "", new { @class = "text-danger" })
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Source", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.BusinessSourceId, new SelectList(ViewBag.Sources, "Id", "Source"), new { @class = "form-control" })
                                                    @*@Html.DropDownListFor(x => x.BusinessSourceId, ViewBag.Sources as SelectList, "Select Business Source", new { @class = "form-control" })*@
                                                </div>
                                            </div>


                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Currency", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.CurrencyId, new SelectList(ViewBag.Currencies, "Id", "Name"), new { @class = "form-control" })
                                                </div>
                                            </div>
                                        </div>


                                        <hr class="higlighter" />
                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Make", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.MakeId, new SelectList(ViewBag.Makers, "MakeCode", "MakeDescription"), "Select Vehicle Make", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.MakeId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Model", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.ModelId, new SelectList(ViewBag.Model, "ModelCode", "ModelDescription"), "Select Vehicle Model", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.ModelId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Vehicle Year", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.VehicleYear, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle year", @maxlength = "4" })
                                                    @Html.ValidationMessageFor(m => m.VehicleYear, "", new { @class = "text-danger" })
                                                    @*@Html.ValidationMessageFor(m => m.VehicleYear, "", new { @class = "text-danger" })*@
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Cubic Capacity", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.CubicCapacity, new { @class = "form-control", @autocomplete = "off", @placeholder = "Cubic Capacity", @maxlength = "4" })
                                                    @Html.ValidationMessageFor(m => m.CubicCapacity, "", new { @class = "text-danger" })
                                                    @*@Html.ValidationMessageFor(m => m.CubicCapacity, "", new { @class = "text-danger" })*@
                                                </div>
                                            </div>
                                        </div>


                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Engine Number", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.EngineNumber, new { @class = "form-control", @autocomplete = "off", @placeholder = "Engine Number" })
                                                    @Html.ValidationMessageFor(m => m.EngineNumber, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Chasis Number", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.ChasisNumber, new { @class = "form-control", @autocomplete = "off", @placeholder = "Chassis Number" })
                                                    @Html.ValidationMessageFor(m => m.ChasisNumber, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <hr class="higlighter" />
                                        <div id="thridparty" class="row">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div id="thirdpartycheck" class="form-group">
                                                    @Html.Label("Add Third Party Insurance", new { @class = "gender-label" })
                                                    @Html.CheckBoxFor(x => x.Addthirdparty, new { @style = "width: 40px;height: 36px;" })
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Add Third Party Amount", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.AddThirdPartyAmount, new { @class = "form-control inputDisabled", @autocomplete = "off", @placeholder = "Add Third Party Amount" })
                                                    @* @Html.TextBoxFor(x => x.AddThirdPartyAmount, new { @class = "form-control", @autocomplete = "off", @placeholder = "Chassis Number" })*@
                                                </div>
                                            </div>
                                        </div>


                                        <div class="row" style="display:none">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.Label("Excess Type", new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.ExcessType, ViewBag.eExcessTypeData as SelectList, new { @class = "form-control" })

                                                    @*@Html.Label("Excess Type", new { @class = "gender-label" })
                                                        <select name="ExcessType" class="form-control" id="ExcessType">
                                                            <option value="1">Percentage</option>
                                                            <option value="2">Fixed Amount</option>
                                                        </select>*@
                                                </div>
                                            </div>

                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Excess", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(m => m.Excess, new { @class = "form-control", @autocomplete = "off", @placeholder = "Excess", maxlength = "5" })
                                                </div>
                                            </div>


                                        </div>
                                        <hr class="higlighter" />
                                        <div class="row">

                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group margin-0">
                                                    @Html.Label("Optional Covers", new { @class = "gender-label" })
                                                </div>
                                                <div class="form-group-list">
                                                    <ul class="list-inline">
                                                        <li>
                                                            @Html.CheckBoxFor(x => x.PassengerAccidentCover)
                                                            @Html.Label("Passenger Accident Cover", new { @class = "gender-label" })
                                                        </li>
                                                        <li>
                                                            @Html.CheckBoxFor(x => x.ExcessBuyBack)
                                                            @Html.Label("Excess BuyBack", new { @class = "gender-label" })

                                                        </li>
                                                        <li>
                                                            @Html.CheckBoxFor(x => x.RoadsideAssistance)
                                                            @Html.Label("Roadside Assistance", new { @class = "gender-label" })

                                                        </li>
                                                        <li>
                                                            @Html.CheckBoxFor(x => x.MedicalExpenses)
                                                            @Html.Label("Medical Expenses", new { @class = "gender-label" })

                                                        </li>
                                                    </ul>

                                                </div>

                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text" id="Containernumberofpersons">
                                                <div class="form-group">
                                                    @Html.Label("Number of Persons", new { @class = "gender-label" })
                                                    @Html.TextBoxFor(x => x.NumberofPersons, null, new { @class = "form-control inputDisabled", @autocomplete = "off", @placeholder = "Number of Persons" })
                                                </div>
                                            </div>

                                        </div>


                                        <div class="row" style="display:none">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Renewal Date", new { @class = "gender-label" })
                                                    <div class='input-group date' id='datetimepicker3'>
                                                        @Html.TextBoxFor(x => x.RenewalDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Policy Renewal Date" })
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>
                                                        </span>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.Label("Transaction Date", new { @class = "gender-label" })
                                                    <div class='input-group' id='datetimepicker4'>
                                                        @Html.TextBoxFor(x => x.TransactionDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Policy Transaction/Effective Date" })
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>
                                                        </span>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>




                                        @*<div class="row">
                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Vehicle Licence Fee", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(x => x.VehicleLicenceFee, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Licence Fee" })
                                                    </div>
                                                </div>
                                            </div>*@
                                        <div>
                                            <hr class="higlighter" />
                                            <div class="row">
                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Basic Premium", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(m => m.Premium, new { @class = "form-control", @autocomplete = "off", @placeholder = "Vehicle Basic Premium" })
                                                    </div>
                                                </div>



                                                <div class="col-sm-6 col-md-6 form-group-select" style="display:none;">
                                                    <div class="form-group">
                                                        @Html.Label("Agent Commission", new { @class = "gender-label" })
                                                        @Html.DropDownListFor(x => x.AgentCommissionId, new SelectList(ViewBag.AgentCommission, "Id", "CommissionName"), new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Stamp Duty", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(m => m.StampDuty, new { @class = "form-control", @autocomplete = "off", @placeholder = "Stamp Duty" })
                                                        @Html.ValidationMessageFor(m => m.StampDuty, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">

                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("ZTSC Levy", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(m => m.ZTSCLevy, new { @class = "form-control", @autocomplete = "off", @placeholder = "ZTSC Levy" })
                                                        @Html.ValidationMessageFor(m => m.ZTSCLevy, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Discount", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(m => m.Discount, new { @class = "form-control ", @autocomplete = "off", @placeholder = "Discount" })
                                                    </div>
                                                </div>
                                            </div>


                                            <div id="thridparty" class="row">
                                                <div class="col-sm-3 col-md-3 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Arrears Fee", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(x => x.ArrearsAmt, new { @class = "form-control inputDisabled", @autocomplete = "off", @value = "0" })
                                                    </div>
                                                </div>

                                                <div class="col-sm-3 col-md-3 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Penalties", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(x => x.PenaltiesAmt, new { @class = "form-control inputDisabled", @autocomplete = "off" })
                                                    </div>
                                                </div>

                                                <div class="col-sm-3 col-md-3 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Transaction fee", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(x => x.TransactionAmt, new { @class = "form-control ", @autocomplete = "off" })
                                                    </div>
                                                </div>

                                                <div class="col-sm-3 col-md-3 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Administration fee", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(x => x.AdministrationAmt, new { @class = "form-control ", @autocomplete = "off" })
                                                    </div>
                                                </div>


                                            </div>

                                            <div id="thridparty" class="row">
                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Vehicle Licence Fee", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(x => x.VehicleLicenceFee, new { @class = "form-control ", @autocomplete = "off" })
                                                    </div>
                                                </div>

                                                <div class="col-sm-6 col-md-6 form-group-text">
                                                    <div class="form-group">
                                                        @Html.Label("Radio License Cost", new { @class = "gender-label" })
                                                        @Html.TextBoxFor(m => m.RadioLicenseCost, new { @class = "form-control ", @autocomplete = "off" })
                                                        @Html.ValidationMessageFor(m => m.RadioLicenseCost, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>



                                        </div>
                                    </fieldset>
                                    <hr class="higlighter" />
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-select">
                                            <div class="form-group">
                                                @Html.Label("Want the licence disk to be delivered ?", new { @class = "gender-label" })
                                                @Html.CheckBoxFor(x => x.IsLicenseDiskNeeded, new { @style = "width: 40px;height: 36px;" })
                                            </div>
                                        </div>

                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.Label("Certificate Serial No", new { @class = "gender-label" })
                                                @Html.TextBoxFor(m => m.CertSerialNo, new { @class = "form-control ", @autocomplete = "off", @placeholder = "Certificate Serial No" })

                                            </div>
                                        </div>


                                    </div>


                                    <hr />
                                    <div class="row">
                                        <div class="col-md-12 next-btn">
                                            <div class="row">
                                                <div class="col-sm-6 col-md-6">
                                                    <div class="text-left">
                                                        @*<div class="back-left"><button type="button" style="padding:5px" onclick="cancelUpdate()" class="btn">Cancel</button></div>*@
                                                    </div>
                                                </div>

                                                <div class="col-sm-6 col-md-6">

                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    @*<hr />*@
                                    @*@if (true)
                                        {
                                            /**/
                                        }
                                        else
                                        {
                                            <hr class="higlighter" />
                                        }*@
                                    @*<div class="row">
                                            <div class="next-btn">
                                                <div class="col-sm-6 col-md-6">
                                                    <div class="form-group">
                                                        @Html.Label("Add More Vehicles ?", new { @class = "gender-label" })



                                                        @Html.CheckBoxFor(m => m.chkAddVehicles, new { @class = "", @style = "width: 40px;height: 36px;" })

                                                    </div>
                                                </div>
                                                <div class="col-sm-6 col-md-6">
                                                    <div class="form-group text-right">
                                                        <button type="submit" id="btnAddVehicle" name="btnAddVehicle" value="addvehical" class="btn btnDisabled @(Model.isUpdate ? "btnDisabled" : "")" style="width: 270px;    margin-top: 8px;">Submit & Add More Vehicle</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>*@

                                    @*<hr />*@
                                    <div class="row">
                                        <div class="col-md-12 next-btn">
                                            <div class="row">
                                                <div class=@(Session["issummaryformvisited"] != null && (bool)Session["issummaryformvisited"] ? "col-sm-4 col-md-4" : "col-sm-6 col-md-6")>
                                                    <div class="text-left">
                                                        <div class="back-left"><button type="button" onclick="gotoPeriviouse('@Model.SummaryId')" class="btn">Back</button></div>
                                                        @*<a style="display:none" id="previouselink" href="/CustomerRegistration/ProductDetail" class="back"></a>*@
                                                    </div>
                                                </div>
                                                <div class="text-right">
                                                    <button type="submit" class="btn">Update</button>
                                                </div>

                                                @*<div class=@(Session["issummaryformvisited"] != null && (bool)Session["issummaryformvisited"] ? "col-sm-4 col-md-4" : "col-sm-6 col-md-6")>
                                                        <div class="text-right">
                                                            <button type="submit" id="btnGenerateQuote" class="btn @(Model.isUpdate ? "btnDisabled" : "")" style="padding:20px 10px;width: auto;">Submit & Generate Quote</button>
                                                        </div>
                                                    </div>

                                                    @if (Session["issummaryformvisited"] != null && (bool)Session["issummaryformvisited"] && Session["VehicleDetails"] != null && ((List<InsuranceClaim.Models.RiskDetailModel>)Session["VehicleDetails"]).Count > 0)
                                                    {

                                                        <div class="col-sm-4 col-md-4">
                                                            <div class="text-right">
                                                                <button type="button" id="btnSkip" onclick="redirectToSummary();" class="btn" style="padding:20px 10px;width: 170px;">Skip</button>
                                                            </div>
                                                        </div>
                                                    }*@

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="container">
                            <!-- Modal -->
                            <div class="modal fade" id="myAddressModal" role="dialog">
                                <div class="modal-dialog">

                                    <!-- Modal content-->
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            <h4 class="modal-title">License Delivery Address</h4>
                                        </div>
                                        <div class="modal-body">
                                            <form class="form-horizontal" role="form" id="licenseDeliveryForm">
                                                <div class="form-group">
                                                    <label class="col-sm-2 control-label"
                                                           for="inputaddress1">Address1</label>
                                                    <div class="col-sm-10">
                                                        <input type="text" class="form-control"
                                                               id="inputaddress1" placeholder="Address1" name="LicenseAddress1" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="col-sm-2 control-label"
                                                           for="inputaddress2">Address2</label>
                                                    <div class="col-sm-10">
                                                        <input type="text" class="form-control"
                                                               id="inputaddress2" placeholder="Address2" name="LicenseAddress2" />
                                                    </div>
                                                </div>
                                                <div class="form-group">

                                                    <label class="col-sm-2 control-label"
                                                           for="inputcity">City</label>
                                                    <div class="col-sm-10">
                                                        <select class="form-control" id="inputcity" name="LicenseCity">
                                                            <option value="">----Select City----</option>
                                                            <option value="Harare">Harare</option>
                                                            <option value="Bulawayo">Bulawayo</option>
                                                            <option selected="selected" value="Chitungwiza">Chitungwiza</option>
                                                            <option value="Mutare">Mutare</option>
                                                            <option value="Epworth">Epworth</option>
                                                            <option value="Gweru">Gweru</option>
                                                            <option value="Kwekwe">Kwekwe</option>
                                                            <option value="Kadoma">Kadoma</option>
                                                            <option value="Masvingo">Masvingo</option>
                                                            <option value="Chinhoyi">Chinhoyi</option>
                                                            <option value="Norton">Norton</option>
                                                            <option value="Marondera">Marondera</option>
                                                            <option value="Ruwa">Ruwa</option>
                                                            <option value="Chegutu">Chegutu</option>
                                                            <option value="Zvishavane">Zvishavane</option>
                                                            <option value="Bindura">Bindura</option>
                                                            <option value="Beitbridge">Beitbridge</option>
                                                            <option value="Redcliff">Redcliff</option>
                                                            <option value="Victoria Falls">Victoria Falls</option>
                                                            <option value="Rusape">Rusape</option>
                                                            <option value="Chiredzi">Chiredzi</option>
                                                            <option value="Kariba">Kariba</option>
                                                            <option value="Karoi">Karoi</option>
                                                            <option value="Chipinge">Chipinge</option>
                                                            <option value="Gokwe">Gokwe</option>
                                                            <option value="Shurugwi">Shurugwi</option>
                                                            <option value="Gwanda">Gwanda</option>
                                                        </select>

                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-sm-offset-2 col-sm-10">
                                                        <div class="checkbox">
                                                            <label>
                                                                <input type="checkbox" id="inputcheckbox" /> Same As Permanent Address
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>

                                            </form>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                            <button type="submit" class="btn btn-primary">Save changes</button>
                                        </div>
                                    </div>

                                </div>
                            </div>

                        </div>
                    }

                </div>

            </div>
        </div>
    </div>
</div>



<script>
    function gotoPeriviouse(summaryDetailsId) {
        debugger;
        // redirectToEndorseCustomer();
        window.location.href = "/Endorsement/EndorsementDetials?summaryId="+summaryDetailsId + "&endorback="+-1  ;
    }

    function cancelUpdate() {
        location.href = '@Url.Action("EndorsementRiskDetails", "Account", new { id=0 })';
    }

    function redirectToSummary() {
        location.href = '@Url.Action("SummaryDetail", "CustomerRegistration")';
    }


    function redirectToEndorseCustomer(){
        //debugger;
        //$.ajax({
        //    url: "/Endorsement/GetvalueSession",
        //    type: "POST",
        //    async: false,
        //    dataType: "json",
        //    success: function (data) {
        //        debugger;
        //        var endorid=-1;
        //        window.location.href = '/Endorsement/EndorsementDetials?summaryId=' + data+"&endorback="+endorid;
        //    },
        //    error: function (data)
        //    {
        //        return null;
        //    }

        //})

    }

    $("#btnGenerateQuote").click(function(){
        if ($("#IsLicenseDiskNeeded").is(":checked")){

            $("#myAddressModal").modal('show');
            return false;
        }

    });

    $("#btnAddVehicle").click(function(){
        if ($("#IsLicenseDiskNeeded").is(":checked")){

            $("#myAddressModal").modal('show');
            return false;
        }

    });


    $("#inputcheckbox").click(function(){
        var isChecked = $("#inputcheckbox").is(":checked");
        if (isChecked == true)
        {

            $.ajax({
                url: "@Url.Action("GetEndorsementLicenseAddress", "Endorsement")",
                type: "GET",
                dataType: "json",
                success: function (result) {
                    debugger;
                    $("#inputaddress1").val(result.LicenseAddress1);
                    $("#inputaddress1").addClass("inputDisabled");
                    $("#inputaddress2").val(result.LicenseAddress2);
                    $("#inputaddress2").addClass("inputDisabled");
                    $("#inputcity").val(result.LicenseCity);
                    $("#inputcity").addClass("inputDisabled");
                }
            });
        }
        else
        {
            //alert("unChecked case");
            //1. Emptying controls
            $("#inputaddress1").val("");
            $("#inputaddress1").removeClass("inputDisabled");
            $("#inputaddress2").val("");
            $("#inputaddress2").removeClass("inputDisabled");
            $("#inputcity").val("");
            $("#inputcity").removeClass("inputDisabled");
        }
    });


    $("form").submit(function(){

    });


    function ClearLicenseIfNotChek()
    {
        if (!$("#IncludeLicenseFee").is(":checked"))
        {
            $("#LicenseId").val("");
            $("#VehicleLicenceFee").val("");
            //  $("#VehicleLicenceFee").addClass("inputDisabled");
            $("#LicExpiryDate").val("");
        }
        else
        {
            //  $("#VehicleLicenceFee").removeClass("inputDisabled");

            var licensePaymentTermId= $("#ZinaraLicensePaymentTermId").val();
            if(licensePaymentTermId!="")
            {
                $(".loading-area").show();
                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);
            }



        }
    }


    function GetRadioLicenseCost(){
        ValidateRadioLicense();

        if(!$("#IncludeRadioLicenseCost").is(':checked'))
        {
            $("#RadioLicenseCost").val("");
            // $("#RadioLicenseCost").addClass("inputDisabled");
        }
        else
        {
            //$("#RadioLicenseCost").removeClass("inputDisabled");


            debugger;

            var RadioLicensePaymentTermId = $("#RadioLicensePaymentTermId").val();

            if(RadioLicensePaymentTermId!="")
            {
                $(".loading-area").show();
                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);
            }
        }
    }


</script>



<script type="text/javascript">
    var today;
    var isReinsuranceConfirmed = false;
    function getVehicleList() {
        $.ajax({
            url: "@Url.Action("getEndorsementVehicleList", "Endorsement")",
            type: "GET",
            dataType: "json",
            success: function (result) {
                var list = result;
                debugger;
                var bodyHTML = "";
                var count = 0;
                var totalpremium = 0.00;
                //var Id = 0;
                $.each(list, function (index, value) {
                    debugger;
                    count++;
                    bodyHTML += "<tr><td>" + value.make + "</td><td>" + value.model + "</td><td>" + value.covertype + "</td><td>" +value.CurrencyName + "</td><td>"+ value.suminsured + "</td><td>" + value.premium + "</td><td><div class='tbl-btn-list'><ul class='list-inline'><li><button type='button' onclick='EditVehicleDetails(" + count + ")' class = 'btn-sm btn-primary' >Edit</button></li><li><button type='button' onclick='DeleteVehicleDetails(" + count + ")' class='btn-sm btn-danger' >Delete</button></li></ul></div></td></tr>"
                    totalpremium += parseFloat(value.premium);
                    //Id = value.Id;
                });

                $("#tdTotalPremium").text(totalpremium);

                $("#tblVehicleList tbody").append(bodyHTML);

                if (bodyHTML != "") {
                    $("#divVehicleList").css("display", "block");
                }
                else {
                    $("#divVehicleList").css("display", "none");
                }
            }
        });
    }

    function EditVehicleDetails(index) {
        debugger;
        var redirecturl = '@Url.Action("EndorsementRiskDetails", "Endorsement", new { id= 0 })';
        redirecturl = redirecturl.replace("0", index);
        location.href = redirecturl;


    }

    @*function DeleteVehicleDetails(index) {
        var obj = {};
        obj.index = index;

        $.ajax({
            url: "@Url.Action("DeleteVehicle", "Endorsement")",
            data: obj,
            type: "POST",
            dataType: "json",
            success: function (result) {
                if (result) {
                    location.href = '@Url.Action("EndorsementRiskDetails", "Endorsement")';
                }
            }
        });
    }*@

    function GetVehicleUsage()
    {
        $.ajax({
            url: "@Url.Action("GetVehicleUsage", "CustomerRegistration")",
            type: "POST",
            data: { ProductId: $("#ProductId").val() },
            dataType: "json",
            success: function (result) {
                debugger;
                var $dropdown = $("#VehicleUsage");
                $dropdown.empty();
                $.each(result, function () {
                    $dropdown.append($("<option />").val(this.Id).text(this.VehUsage));
                });

                //if ($("fieldset").attr("disabled") != "disabled") {
                //    if ($("#isVehicleRegisteredonICEcash").val() == 1) {
                //        generateQuotewithICEcash();
                //    }
                //    else{
                //        QuoteCalculation();
                //    }
                //}
            }
        });
    }


    function GetRadioLicenseCost(){
        debugger;
        var selectedTerm = $("#PaymentTermId option:selected").val();

        var ProductId = $("#ProductId option:selected").val();

        if(selectedTerm!=""&& ProductId!="")
        {
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetRadioLicenseCost", "ContactCentre")",
                data: { id: selectedTerm,productId: ProductId},
                success: function (data ) {
                    $("#RadioLicenseCost").val(data)
                }
            })
        }
    }


    function updateEndDate() {
        debugger;
        var selectedTerm = $("#PaymentTermId option:selected").val();
        switch (parseInt(selectedTerm)) {
            case 1:
                setPolicyEndDate(12);
                break;
            case 2:
                setPolicyEndDate(1)
                break;
            case 3:
                setPolicyEndDate(3);
                break;
            case 4:
                setPolicyEndDate(4);
                break;
            case 5:
                setPolicyEndDate(5)
                break;
            case 6:
                setPolicyEndDate(6);
                break;
            case 7:
                setPolicyEndDate(7);
                break;
            case 8:
                setPolicyEndDate(8)
                break;
            case 9:
                setPolicyEndDate(9);
                break;
            case 10:
                setPolicyEndDate(10);
                break;
            case 11:
                setPolicyEndDate(11)
                break;

        }





    }

    $(document).ready(function () {
        debugger;
        $("#datetimepicker2").datetimepicker({
            format: 'MM/D/YYYY',
            minDate: new Date()
        })
        $("#datetimepicker1").datetimepicker({
            format: 'MM/D/YYYY',
            minDate: new Date()
        }).on('dp.change', function (e) {
            debugger;
            var incrementDay = moment(new Date(e.date));
            incrementDay.add(1, 'days');
            $('#datetimepicker2').data('DateTimePicker').minDate(incrementDay);
            $(this).data("DateTimePicker").hide();
            updateEndDate();
        });

        if('@Model.ErrorMessage' !="")
        {
            toastr.error('@Model.ErrorMessage');
            $("fieldset").removeAttr("disabled");
        }


        updateEndDate();

        var data= '@Model.isUpdate';
        if (data == 'True') {
            $("#CoverEndDate").val('@(Model.CoverEndDate != null ? Model.CoverEndDate.Value.ToString("MM/dd/yyyy") : DateTime.Now.ToString("MM/dd/yyyy"))');

        }

        $("#isVehicleRegisteredonICEcash").val(0);

        if (@Model.VehicleUsage != null && @Model.VehicleUsage > 0)
        {
            $("#VehicleUsage").val('@Model.VehicleUsage');
        }

        if (@Model.PaymentTermId != null && @Model.PaymentTermId > 0)
        {
            $("#PaymentTermId").val('@Model.PaymentTermId');
        }

        if (@Model.ProductId != null && @Model.ProductId > 0)
        {
            $("#ProductId").val('@Model.ProductId');
        }

        if('@Model.CombinedID'!=null && '@Model.CombinedID'!='')
        {
            $('#IncludeLicenseFee').prop('checked', true);
        }

        today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;

        $("#CoverStartDate").val(today);
        $("#TransactionDate").val(today).css("background-color", "lightgray");



        if (parseInt($("#NoOfCarsCovered").val()) > 0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("CheckDuplicateRegisterationNumberExist", "CustomerRegistration")",
                data: { regNo: $("#RegistrationNo").val() },
                success: function (data) {

                    debugger;
                    if (data) {
                        toastr.warning("Vehicle with same Registeration Number already exist.");
                        $("#RegistrationNo").focus();
                    }
                    else
                    {
                        if ($("#PaymentTermId").val() != "" && $("#ProductId").val() != "" && $("#RegistrationNo").val() != "") {
                            // checkVRNwithICEcash();

                            $(".loading-area").show();
                            setTimeout(function(){
                                $(".loading-area").hide();
                                CalculatePremiumByCoverType();
                            }, 1000);

                        }
                        else{
                            toastr.warning("Please Select Valid Payment Term And Vehicle Type And Vehicle Registeration Number.");
                        }

                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (textStatus == 'timeout') {
                        //doe iets
                    } else if (textStatus == 'error') {
                        //doe iets
                    }
                } //EINDE error
            }); //EINDE ajax
        }
        else
        {
            if ($("#PaymentTermId").val() != "" && $("#ProductId").val() != "" && $("#RegistrationNo").val() != "") {
                // checkVRNwithICEcash();
                $(".loading-area").show();
                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);

            }
            else{
                toastr.warning("Please Select Valid Payment Term And Vehicle Type And Vehicle Registeration Number.");
            }
        }


        $("#PaymentTermId").change(function () {
            var selectedTerm = $("#PaymentTermId option:selected").val();
            switch (parseInt(selectedTerm)) {
                case 1:
                    setPolicyEndDate(12);
                    break;
                case 2:
                    setPolicyEndDate(1)
                    break;
                case 3:
                    setPolicyEndDate(3);
                    break;
                case 4:
                    setPolicyEndDate(4);
                    break;
                case 5:
                    setPolicyEndDate(5)
                    break;
                case 6:
                    setPolicyEndDate(6);
                    break;
                case 7:
                    setPolicyEndDate(7);
                    break;
                case 8:
                    setPolicyEndDate(8)
                    break;
                case 9:
                    setPolicyEndDate(9);
                    break;
                case 10:
                    setPolicyEndDate(10);
                    break;

                case 11:
                    setPolicyEndDate(11);
                    break;
            }

            $(".loading-area").show();
            setTimeout(function(){
                $(".loading-area").hide();
                CalculatePremiumByCoverType();
            }, 1000);

        });


        isReinsuranceConfirmed = false;
        getVehicleList();

        if ($("#PassengerAccidentCover").is(":checked")) {
            debugger;

            $("#NumberofPersons").removeClass("inputDisabled");
        }
        else {
            $("#NumberofPersons").addClass("inputDisabled");
        }


        ////////////////////////

        if ($("#Addthirdparty").is(":checked")) {
            debugger;

            $("#AddThirdPartyAmount").removeClass("inputDisabled");
        }
        else {
            $("#AddThirdPartyAmount").addClass("inputDisabled");
        }

        $("#chkAddVehicles").click(function () {
            debugger;
            if ($("#chkAddVehicles").is(":checked")) {
                $("#btnAddVehicle").removeClass("btnDisabled"); $("#btnGenerateQuote").addClass("btnDisabled");
            }
            else {
                $("#btnAddVehicle").addClass("btnDisabled"); $("#btnGenerateQuote").removeClass("btnDisabled");
            }

        });


        $("#validationSumIns").css("display", "none");

        $("#btnGenerateQuote").click(function () {

            var coverselected = $("#CoverTypeId option:selected").val();
            if (coverselected == "1" && $("#SumInsured").val() == "") {
                $("#validationSumIns").css("display", "block");
                return false;
            }
            else {
                $("#validationSumIns").css("display", "none");
            }

        });
        // getsessionvalue();

        if('@Model.ErrorMessage' !="")
        {
            toastr.error('@Model.ErrorMessage');
            $("fieldset").removeAttr("disabled");
        }



        $("#ZinaraLicensePaymentTermId").change(function() {
            var IsVehicleLicense = $("#IncludeLicenseFee").is(":checked");
            var vehicleLicensePaymentTerm = $("#ZinaraLicensePaymentTermId").val();


            if ($("#PaymentTermId").val() != "" && $("#ProductId").val() != "" && $("#RegistrationNo").val() != "" && $("#CoverTypeId").val()!="" && ($("#TaxClassId").val()!="" && $("#TaxClassId").val()!=null) && IsVehicleLicense==true && vehicleLicensePaymentTerm!="")
            {
                $(".loading-area").show();
                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);
            }
        });

        $("#RadioLicensePaymentTermId").change(function() {

            var IsRadioLicense = $("#IncludeRadioLicenseCost").is(":checked");
            var radioLicensePaymentTerm = $("#RadioLicensePaymentTermId").val();

            if ($("#PaymentTermId").val() != "" && $("#ProductId").val() != "" && $("#RegistrationNo").val() != "" && $("#CoverTypeId").val()!="" && ($("#TaxClassId").val()!="" && $("#TaxClassId").val()!=null) && IsRadioLicense==true && radioLicensePaymentTerm!="")
            {
                $(".loading-area").show();
                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);
            }

        });

        $("#TaxClassId").change(function() {

            if($("#TaxClassId").val()!="")
            {
                $(".loading-area").show();

                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);

            }
        });


    });


    function CalculatePremiumByCoverType()
    {

        if ($("#PaymentTermId").val() != "" && $("#ProductId").val() != "" && $("#RegistrationNo").val() != "" && $("#CoverTypeId").val()!="")
        {
            var coverytype = $('#CoverTypeId option:selected').val();
            //if (coverytype != 4) {
            generateQuotewithICEcash();

            //}
            //else {
            //    QuoteCalculation();
            //}
        }
    }


    ////////////////////


    $(function () { // will trigger when the document is ready
        debugger;
        //$('#datetimepicker1,#datetimepicker2,#datetimepicker3,#datetimepicker4').datetimepicker({
        //    format: 'MM/D/YYYY',

        //});


        $("#ProductId").change(function () {
            GetVehicleUsage();
            GetVehicleTaxClass($("#ProductId").val());


            $(".loading-area").show();

            setTimeout(function(){
                $(".loading-area").hide();
                CalculatePremiumByCoverType();
            }, 1000);

            //if ($("fieldset").attr("disabled") == "disabled") {
            //    if ($("#PaymentTermId").val() != "" && $("#ProductId").val() != "" && $("#RegistrationNo").val() != "") {
            //        checkVRNwithICEcash();
            //    }
            //    else{
            //        toastr.warning("Please Select Valid Payment Term And Vehicle Type And Vehicle Registeration Number.");
            //    }
            //}

            //GetRadioLicenseCost();


        });




        $("#MakeId").change(function () {
            GetVehicleModels("");
        });




        $("#RegistrationNo").blur(function () {

            debugger;

            if (parseInt($("#NoOfCarsCovered").val()) > 1) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("CheckDuplicateRegisterationNumberExist", "CustomerRegistration")",
                    data: { regNo: $("#RegistrationNo").val() },
                    success: function (data) {
                        debugger;
                        if (data) {
                            toastr.warning("Vehicle with same Registeration Number already exist.");
                            $("#RegistrationNo").focus();
                        }
                        else
                        {
                            $(".loading-area").show();
                            setTimeout(function(){
                                $(".loading-area").hide();
                                CalculatePremiumByCoverType();
                            }, 1000);

                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        if (textStatus == 'timeout') {
                            //doe iets
                        } else if (textStatus == 'error') {
                            //doe iets
                        }
                    } //EINDE error
                }); //EINDE ajax
            }
            else
            {
                $(".loading-area").show();
                setTimeout(function(){
                    $(".loading-area").hide();
                    CalculatePremiumByCoverType();
                }, 1000);
            }
        });

        $("#SumInsured").blur(function () {

            var coverselected = $("#CoverTypeId option:selected").val();
            if (coverselected == "1" && $("#SumInsured").val() == "") {
                $("#validationSumIns").css("display", "block");
                return false;
            }
            else {
                $("#validationSumIns").css("display", "none");
            }


            QuoteCalculation();

            //if ($("#isVehicleRegisteredonICEcash").val() == 1) {
            //    generateQuotewithICEcash();
            //}
            //else{
            //    QuoteCalculation();
            //}

        });

        //$("#RegistrationNo").change(function(){

        //    checkVRNwithICEcash();

        //});

        $("#Excess").blur(function () {

            QuoteCalculation();
        });
        $("#ExcessType").change(function () {

            QuoteCalculation();
        });
        $("#VehicleUsage").change(function () {

            QuoteCalculation();
        });
        //$("#CoverTypeId").change(function () {

        //    QuoteCalculation();
        //});
        $("#AddThirdPartyAmount").blur(function () {

            QuoteCalculation();
        });
        $("#NumberofPersons").blur(function () {

            QuoteCalculation();
        });

        $("#ExcessBuyBack").click(function () {
            QuoteCalculation();
        });

        $("#RoadsideAssistance").click(function () {
            QuoteCalculation();
        });

        $("#MedicalExpenses").click(function () {
            QuoteCalculation();
        });
        $("#Addthirdparty").click(function () {
            QuoteCalculation();
        });
        $("#PassengerAccidentCover").click(function () {
            QuoteCalculation();
        });
        $("#IncludeRadioLicenseCost").click(function () {

            debugger;


            //if($("#IncludeRadioLicenseCost").prop("checked") == true){
            //    GetRadioLicenseCost();
            //}
            //else if($("#IncludeRadioLicenseCost").prop("checked") == false){
            //    $("#RadioLicenseCost").val(0)
            //}

            //QuoteCalculation();


        });

        //called when key is pressed in textbox
        $("#NoOfCarsCovered,#CubicCapacity,#VehicleYear,#VehicleSumInsures,#SumInsured,#RadioLicenseCost,#OptionalCovers,#Excess").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                //$("#errmsg").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });
    });



    function GetVehicleTaxClass(productId)
    {
        $.ajax({
            url: "@Url.Action("GetVehicleTaxClass", "CustomerRegistration")",
            type: "POST",
            data: { vehicleTypeId: productId},
            dataType: "json",
            success: function (result) {
                debugger;
                var $dropdown = $("#TaxClassId");
                $dropdown.empty();
                $dropdown.append($("<option />").val("").text("Select Tax Class"));
                $.each(result, function () {
                    $dropdown.append($("<option />").val(this.TaxClassId).text(this.Description));
                });
                var taxClassId = '@Model.TaxClassId';
                if (taxClassId != "") {
                    $('#TaxClassId').val(taxClassId);
                }
            }
        });
    }

    function getProductIdbyVehicleUsageId(vUsage){
        $.ajax({
            type: "POST",
            url: "@Url.Action("getproductidbyvehicleusage", "CustomerRegistration")",
            data:{vehicleusageId:parseInt(vUsage)},
            success: function (data) {
                $("#ProductId").val(data)
                //set  prod id
                GetVehicleUsage();
                //call funcion

                $("#VehicleUsage").val(vUsage);
                //$("#VehicleUsage").addClass("inputDisabled"); // 01-04-oct

            }
        });
    }

    function checkVRNwithICEcash() {
        $(".loading-area").show();
        $.ajax({
            type: "POST",
            url: "@Url.Action("checkVRNwithICEcash", "CustomerRegistration")",
            data: { regNo: $("#RegistrationNo").val(), PaymentTerm : $("#PaymentTermId").val() },
            success: function (data) {

                if (data.result == 0) {
                    toastr.error(data.message);
                    $("fieldset").removeAttr("disabled");
                    $("#ProductId").removeClass("inputDisabled")
                    $("#MakeId").removeClass("inputDisabled")
                    $("#VehicleYear").removeClass("inputDisabled")
                    $("#EngineNumber").removeClass("inputDisabled")
                    $("#ChasisNumber").removeClass("inputDisabled")
                    $("#CubicCapacity").removeClass("inputDisabled")
                    $("#VehicleUsage").removeClass("inputDisabled")
                    $("#ModelId").removeClass("inputDisabled")
                    //$("#VehicleUsage").removeClass("inputDisabled")
                    $("#isVehicleRegisteredonICEcash").val(0);
                    $(".loading-area").hide();
                }
                if (data.result == 1) {
                    debugger;
                    var vehicle = {};
                    vehicle = data.Data.Response.Quotes[0].Vehicle;

                    GetVehicleMake();

                    var vMake = vehicle.Make;
                    $("#MakeId option").filter(function() {return this.text == vMake.toUpperCase(); }).attr('selected', true);

                    //  $("#MakeId").addClass("inputDisabled");
                    var vModel = vehicle.Model;
                    GetVehicleModels(vModel);

                    var vYearManufacture = vehicle.YearManufacture;
                    if(vYearManufacture==null)
                    {
                        $("#VehicleYear").val("1900"); // default value
                    }
                    else
                    {
                        $("#VehicleYear").val(vYearManufacture);
                    }


                    $("#VehicleYear").addClass("inputDisabled");
                    var vUsage = vehicle.VehicleType;
                    //ajax vehicle u -> prod id
                    getProductIdbyVehicleUsageId(vUsage);

                    // call prodid drp change event
                    $("fieldset").removeAttr("disabled");
                    $("#isVehicleRegisteredonICEcash").val(1);
                    $("#CubicCapacity").val("0");
                    $("#EngineNumber").val("0");
                    $("#ChasisNumber").val("0");
                    $("#CubicCapacity").addClass("inputDisabled")
                    $("#EngineNumber").addClass("inputDisabled")
                    $("#ChasisNumber").addClass("inputDisabled")

                    $(".loading-area").hide();
                }


                if ($("#isVehicleRegisteredonICEcash").val() == 1) {
                    generateQuotewithICEcash();
                }
                else{
                    QuoteCalculation();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $(".loading-area").hide();
                if (textStatus == 'timeout') {
                    //doe iets
                } else if (textStatus == 'error') {
                    //doe iets
                }
            } //EINDE error
        }); //EINDE ajax
    }

    function generateQuotewithICEcash() {

        debugger;
        var flag = true;
        if ($("#CoverTypeId").val() == "4") {
            if($("#SumInsured").val() == "" || $("#SumInsured").val() == "0.00")
            {
                flag = false;
                toastr.warning("Please Enter Sum Insured !!");
            }
        }
        else
        {
            if($("#SumInsured").val() == "" || $("#SumInsured").val() == "0.00")
            {
                $("#SumInsured").val('0');
            }
        }
        if ($("#PaymentTermId").val() == "") {
            flag = false;
            toastr.warning("Please Select A Payment Term !!");
        }

        ValidateRadioLicense();

        var isLicense = $("#IncludeLicenseFee").is(':checked');
        var isRadioLicense = $("#IncludeRadioLicenseCost").is(':checked');
        var taxClass =  $("#TaxClassId").val();

        var licensePaymentTerm = $("#ZinaraLicensePaymentTermId").val();
        var  radioPaymentTerm = $("#RadioLicensePaymentTermId").val();


        if(isLicense==true && licensePaymentTerm=="")
        {
            flag = false;
            toastr.warning("Please Select A Payment Term of Vehicle license !!");
        }


        if(isRadioLicense==true && radioPaymentTerm=="")
        {
            flag = false;
            toastr.warning("Please Select A Payment Term of Radio license !!");
        }


        if(flag)
        {
            $(".loading-area").show();
            $.ajax({
                type: "POST",
                url: "@Url.Action("getPolicyDetailsFromICEcash", "CustomerRegistration")",
                data: { regNo: $("#RegistrationNo").val(), PaymentTerm : $("#PaymentTermId").val(), suminsured : $("#SumInsured").val(), make: $("#MakeId option:selected").text(), model : $("#ModelId option:selected").text(), VehicleYear : $("#VehicleYear").val(), CoverTypeId : $("#CoverTypeId").val(), VehicleType : $("#ProductId").val(), CoverStartDate: $("#CoverStartDate").val() , CoverEndDate : $("#CoverEndDate").val(), VehilceLicense: isLicense, taxClassId: taxClass, RadioLicense: isRadioLicense, licensePaymentTerm:licensePaymentTerm, radioPaymentTerm:radioPaymentTerm },
                //data: { regNo: $("#RegistrationNo").val(), PaymentTerm : $("#PaymentTermId").val(), suminsured : $("#SumInsured").val(), make: $("#MakeId option:selected").text(), model : $("#ModelId option:selected").text(), VehicleYear : $("#VehicleYear").val(), CoverTypeId : $("#CoverTypeId").val(), VehicleType : $("#VehicleUsage").val() },
                success: function (data) {

                    debugger;
                    if (data.result == 0) {
                        toastr.error(data.message);
                        $("fieldset").removeAttr("disabled");
                        //$("#ProductId").removeClass("inputDisabled")
                        $(".loading-area").hide();
                        $("#InsuranceId").val("");
                    }
                    if (data.result == 1) {
                        var policy = {};
                        policy = data.Data.Response.Quotes[0].Policy;

                        var StampDuty = policy.StampDuty;
                        $("#StampDuty").val(parseFloat(StampDuty).toFixed(2));
                        var GovernmentLevy = policy.GovernmentLevy;
                        $("#ZTSCLevy").val(parseFloat(GovernmentLevy).toFixed(2));
                        var CoverAmount = policy.CoverAmount;
                        //$("#Premium").val(parseFloat(CoverAmount).toFixed(2));
                        $("#Discount").val(parseFloat(data.Data.LoyaltyDiscount).toFixed(2));

                        var calulatePremium = CoverAmount-data.Data.LoyaltyDiscount;

                        $("#Premium").val(parseFloat(calulatePremium).toFixed(2));

                        $("#InsuranceId").val(data.Data.Response.Quotes[0].InsuranceID);


                        $("#basicPremiumICEcash").val(parseFloat(CoverAmount).toFixed(2));

                        $("#stampDutyICEcash").val(parseFloat(StampDuty).toFixed(2))
                        $("#LevyICEcash").val(parseFloat(GovernmentLevy).toFixed(2))


                        if(data.Data.Response.Quotes[0]!=null && data.Data.Response.Quotes[0].Licence!=null)
                        {

                            $("#LicenseId").val(data.Data.Response.Quotes[0].LicenceID);

                            var arrAmount = parseFloat(data.Data.Response.Quotes[0].Licence.TotalLicAmt).toFixed(2);
                            var penaltiesAmount = parseFloat(data.Data.Response.Quotes[0].Licence.PenaltiesAmt).toFixed(2);

                            var transactionAmt = parseFloat(data.Data.Response.Quotes[0].Licence.TransactionAmt).toFixed(2);
                            var administrationAmt = parseFloat(data.Data.Response.Quotes[0].Licence.AdministrationAmt).toFixed(2);

                            //if(penaltiesAmount>0)
                            //    toastr.error("Please pay first Penalties amount.");


                            if(isRadioLicense)
                                $("#RadioLicenseCost").val(parseFloat(data.Data.Response.Quotes[0].Licence.TotalRadioTVAmt).toFixed(2));

                            $("#ArrearsAmt").val(arrAmount);
                            $("#PenaltiesAmt").val(penaltiesAmount);

                            $("#TransactionAmt").val(transactionAmt);
                            $("#AdministrationAmt").val(administrationAmt);


                            $("#VehicleLicenceFee").val(parseFloat(data.Data.Response.Quotes[0].Licence.TotalLicAmt).toFixed(2) );
                           // $("#LicExpiryDate").val(data.Data.Response.Quotes[0].Licence.LicExpiryDate);
                            $("#CombinedID").val(data.Data.Response.Quotes[0].CombinedID);
                        }





                        QuoteCalculation()
                        $(".loading-area").hide();
                    }
                    else
                    {
                        QuoteCalculation();
                        $(".loading-area").hide();
                    }

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    if (textStatus == 'timeout') {
                        $(".loading-area").hide();
                    } else if (textStatus == 'error') {
                        $(".loading-area").hide();
                    }
                } //EINDE error
            }); //EINDE ajax

        }

        $(".loading-area").hide();
    }

    function GetVehicleModels(ModelName)
    {
        $.ajax({
            url: "@Url.Action("GetVehicleModel", "CustomerRegistration")",
            type: "POST",
            data: { makeCode: $("#MakeId").val() },
            dataType: "json",
            success: function (result) {
                debugger;
                var $dropdown = $("#ModelId");
                $dropdown.empty();
                $.each(result, function () {
                    $dropdown.append($("<option />").val(this.ModelCode).text(this.ModelDescription));
                });
                if (ModelName != "") {


                    $("#ModelId option").filter(function() {return this.text == ModelName.toUpperCase(); }).attr('selected', true);


                    //  $("#ModelId option:contains(" + ModelName.toUpperCase() + ")").attr('selected', 'selected');
                    //$("#ModelId").attr("readonly","readonly");
                    //  $("#ModelId").addClass("inputDisabled")
                    // $("#ProductId").addClass("inputDisabled") // on 04-oct

                    //$("#ProductId").attr("readonly","readonly");
                }
            }
        });
    }



    function GetVehicleMake()
    {
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "@Url.Action("GetVehicleMake1", "CustomerRegistration")",
            data: "{}",
            dataType: "json",
            async:false,
            success: function (Result) {

                var $dropdown = $("#MakeId");
                $dropdown.empty();

                $.each(Result, function (key, value) {
                    $("#MakeId").append($("<option></option>").val
                    (value.MakeCode).html(value.MakeDescription));
                });
            },
            error: function (Result) {
                alert("Error");
            }
        });
    }




    function setPolicyEndDate(numberOfMonth) {
        //debugger;
        today = $('#datetimepicker1').data('DateTimePicker').date()._d;//new Date();
        today.setMonth(today.getMonth() + numberOfMonth);

        var dd = "";
        if (today.getDate() == 1) {
            today = new Date(today.getFullYear(), today.getMonth(), 0);
            dd = today.getDate();
        }
        else {
            dd = today.getDate() - 1;
        }


        var mm = today.getMonth() + 1; //January is 0!

        //var dd = today.getDate()-1;
        //var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;
        $("#CoverEndDate").val(today);
        //debugger;
        var dateParts = today.split("/");
        today = new Date(dateParts[2], dateParts[0] - 1, dateParts[1]);
        today.setDate(today.getDate() + 1);
        dd = today.getDate();
        mm = today.getMonth() + 1; //January is 0!

        yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        var today = mm + '/' + dd + '/' + yyyy;


        $("#RenewalDate").val(today);
    }
    //function setPolicyEndDate(numberOfMonth) {
    //    debugger;
    //    today = new Date();
    //    today.setMonth(today.getMonth() + numberOfMonth);

    //    var dd = "";
    //    if (today.getDate() == 1) {
    //        today = new Date(today.getFullYear(), today.getMonth(), 0);
    //        dd = today.getDate();
    //    }
    //    else {
    //        dd = today.getDate() - 1;
    //    }


    //    var mm = today.getMonth() + 1; //January is 0!

    //    //var dd = today.getDate()-1;
    //    //var mm = today.getMonth() + 1; //January is 0!

    //    var yyyy = today.getFullYear();
    //    if (dd < 10) {
    //        dd = '0' + dd;
    //    }
    //    if (mm < 10) {
    //        mm = '0' + mm;
    //    }
    //    var today = mm + '/' + dd + '/' + yyyy;
    //    $("#CoverEndDate").val(today);
    //    debugger;
    //    var dateParts = today.split("/");
    //    today = new Date(dateParts[2], dateParts[0] - 1, dateParts[1]);
    //    today.setDate(today.getDate() + 1);
    //    dd = today.getDate();
    //    mm = today.getMonth() + 1; //January is 0!

    //    yyyy = today.getFullYear();
    //    if (dd < 10) {
    //        dd = '0' + dd;
    //    }
    //    if (mm < 10) {
    //        mm = '0' + mm;
    //    }
    //    var today = mm + '/' + dd + '/' + yyyy;
    //    $("#RenewalDate").val(today);
    //}

    function replacableRedirect() {
        window.location.href = "@Url.Action("SummaryDetail", "CustomerRegistration")";
    }
    function QuoteCalculation() {
        debugger;
        if ($("#SumInsured").val() == "") {
            $("#SumInsured").val("0");
        }
        var sumInsured = parseFloat($("#SumInsured").val());

        if (sumInsured > 100000 && !isReinsuranceConfirmed) {
            bootbox.confirm("Sum Insured above than 100000 will be considered as Reinsurance case. Are you sure you want to continue ?", function (result) {
                debugger;
                if (!result) {
                    bootbox.hideAll();
                    return false;
                }
                else {
                    isReinsuranceConfirmed = true;
                    callQuoteCalculation(sumInsured);
                }
            });
        }
        else {
            callQuoteCalculation(sumInsured);
        }

    }


    function ValidateRadioLicense()
    {
        var isLicense = $("#IncludeLicenseFee").is(':checked');
        var isRadioLicense = $("#IncludeRadioLicenseCost").is(':checked');

        if(isRadioLicense && !isLicense)
        {
            toastr.warning("Only Radio license will be not allowed.");
            $("#IncludeRadioLicenseCost").prop("checked", false);
        }
    }

    function callQuoteCalculation(sumInsured) {
        if (sumInsured < 1) {
            //return false;
        }
        var vehicleUsageId = parseInt($("#VehicleUsage").val());
        if (vehicleUsageId < 1) {
            return false;
        }
        var coverType = parseInt($("#CoverTypeId").val());
        if (coverType < 1) {
            return false;
        }

        var excessType;
        if ($("#ExcessType").val() == "") {
            excessType = 1;
        }
        else{
            excessType = parseInt($("#ExcessType").val());
        }

        var excess;
        if ($("#Excess").val() == "") {
            excess = 0;
        }
        else {
            excess = parseFloat($("#Excess").val())
        }


        var AddThirdPartyAmount = parseFloat($("#AddThirdPartyAmount").val());
        var NumberofPersons = parseInt($("#NumberofPersons").val());
        var PassengerAccidentCover = $("#PassengerAccidentCover").is(":checked");
        var ExcessBuyBack = $("#ExcessBuyBack").is(":checked");
        var RoadsideAssistance = $("#RoadsideAssistance").is(":checked");
        var MedicalExpenses = $("#MedicalExpenses").is(":checked");
        var Addthirdparty = $("#Addthirdparty").is(":checked");
        var RadioLicenseCost = ($("#RadioLicenseCost").val());
        var AgentCommissionId = ($("#AgentCommissionId").val());
        var IncludeRadioLicenseCost = $("#IncludeRadioLicenseCost").is(":checked");
        var policytermid = $("#PaymentTermId").val();

        var vehicleStartDate = $("#CoverStartDate").val();
        var vehicleEndDate = $("#CoverEndDate").val();



        debugger;

        if (NumberofPersons == undefined || NumberofPersons == null || NumberofPersons == "") {
            NumberofPersons = 0;
        }

        var ProductId =$("#ProductId").val();

        $.ajax({
            type: "POST",
            url: "@Url.Action("CalculatePremium", "CustomerRegistration")",
            data: { vehicleUsageId: vehicleUsageId, sumInsured: sumInsured, coverType: coverType, excessType: excessType, excess: excess, AddThirdPartyAmount: AddThirdPartyAmount, NumberofPersons: NumberofPersons, Addthirdparty: Addthirdparty, PassengerAccidentCover: PassengerAccidentCover, ExcessBuyBack: ExcessBuyBack, RoadsideAssistance: RoadsideAssistance, MedicalExpenses: MedicalExpenses, RadioLicenseCost: RadioLicenseCost, IncludeRadioLicenseCost: IncludeRadioLicenseCost, policytermid: policytermid, isVehicleRegisteredonICEcash: $("#isVehicleRegisteredonICEcash").val() == "1", BasicPremium : $("#basicPremiumICEcash").val(),StampDuty : $("#stampDutyICEcash").val(), ZTSCLevy : $("#LevyICEcash").val(), ProductId: ProductId, vehicleStartDate:vehicleStartDate, vehicleEndDate: vehicleEndDate, manufacturerYear: "", IsEndorsment: true},
            success: function (data) {
                debugger;
                $("#Premium").val(parseFloat(data.Premium).toFixed(2));
                $("#StampDuty").val(parseFloat(data.StamDuty).toFixed(2));
                $("#ZTSCLevy").val(parseFloat(data.ZtscLevy).toFixed(2));
                $("#PassengerAccidentCoverAmount").val(parseFloat(data.PassengerAccidentCoverAmount).toFixed(2));
                $("#ExcessBuyBackAmount").val(parseFloat(data.ExcessBuyBackAmount).toFixed(2));
                $("#RoadsideAssistanceAmount").val(parseFloat(data.RoadsideAssistanceAmount).toFixed(2));
                $("#MedicalExpensesAmount").val(parseFloat(data.MedicalExpensesAmount).toFixed(2));
                $("#MedicalExpensesPercentage").val(parseFloat(data.MedicalExpensesPercentage).toFixed(2));
                $("#RoadsideAssistancePercentage").val(parseFloat(data.RoadsideAssistancePercentage).toFixed(2));
                $("#ExcessBuyBackPercentage").val(parseFloat(data.ExcessBuyBackPercentage).toFixed(2));
                $("#PassengerAccidentCoverAmountPerPerson").val(parseFloat(data.PassengerAccidentCoverAmountPerPerson).toFixed(2));
                $("#ExcessAmount").val(parseFloat(data.ExcessAmount).toFixed(2));

                $("#AnnualRiskPremium").val(parseFloat(data.AnnualRiskPremium).toFixed(2));
                $("#TermlyRiskPremium").val(parseFloat(data.TermlyRiskPremium).toFixed(2));
                $("#QuaterlyRiskPremium").val(parseFloat(data.QuaterlyRiskPremium).toFixed(2));
                $("#Discount").val(parseFloat(data.Discount).toFixed(2));
                // $("#InsuranceId").val(data.Data.Response.Quotes[0].InsuranceID);

                //$("#NumberofPersons").val(data.NumberofPersons);
                //$("#AddThirdPartyAmount").val(data.AddThirdPartyAmount);

                if (data.Status == false) {
                    toastr.warning(data.Message);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (textStatus == 'timeout') {
                    //doe iets
                } else if (textStatus == 'error') {
                    //doe iets
                }
            } //EINDE error
        }); //EINDE ajax

    }


    $("#CoverTypeId").on('change', function () {
        debugger;
        var coverytype = $('#CoverTypeId option:selected').val();
        if (coverytype != 4) {
            $("#thridparty").hide();
        }
        else {
            $("#thridparty").show();
        }

        //if ($("#isVehicleRegisteredonICEcash").val() == "1") {
        //    generateQuotewithICEcash();
        //}
        //else{
        //    QuoteCalculation();
        //}

        generateQuotewithICEcash();

    });







    $('#Addthirdparty').change(function () {
        debugger;
        if ($(this).is(':checked')) {
            $("#AddThirdPartyAmount").removeClass("inputDisabled");


        }
        else {
            $("#AddThirdPartyAmount").addClass("inputDisabled");
            $("#AddThirdPartyAmount").val("0")
        }
    })


    $('#PassengerAccidentCover').change(function () {
        debugger;
        if ($(this).is(':checked')) {
            $("#NumberofPersons").removeClass("inputDisabled");


        }
        else {
            $("#NumberofPersons").addClass("inputDisabled");
            $("#NumberofPersons").val("0");
        }
    })

</script>