@model InsuranceClaim.Models.ClaimNotificationModel
@{
    ViewBag.Title = "SaveClaimant";
    Layout = "~/Views/Shared/_InsuranceMain.cshtml";
    var errmsgs = TempData["errorMsg"];

}
<div class="body-content-section">
    <div class="form-section-top">
        <div class="container">
            @{
                var menutab = Html.Partial("ClaimRegister");
            }
            @menutab
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 form-section-col">
                    <div class="form-group-section">
                        <div class="form-title">
                            <h4>Claims Notification</h4>
                        </div>
                        <div class="form-group-input">
                            @using (Html.BeginForm("SaveClaimant", "Claimant", FormMethod.Post, new { @class = "form-horizontal" }))
                            {
                                @Html.HiddenFor(x => x.VehicleId)
                                @Html.HiddenFor(x => x.PolicyId)
                                @Html.HiddenFor(x => x.VRNNumber)
                                @Html.Hidden("dateValidte")
                                <div class="row">
                                    <div class="col-sm-12 col-md-12 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.VRNDetail, new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.VRNDetail, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter VRN Detail", @Id = "txtPolicyNumber" })
                                            @Html.ValidationMessageFor(x => x.VRNDetail, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.PolicyNumber, new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.PolicyNumber, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Policy Number", @Id = "PolicyNumber", @readonly = "readonly" })
                                            @Html.ValidationMessageFor(x => x.PolicyNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.CustomerName, new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.CustomerName, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Customer Name", @Id = "CustomerName", @readonly = "readonly" })
                                            @*@Html.ValidationMessageFor(x => x.CustomerName, "", new { @class = "text-danger" })*@
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.CoverStartDate, new { @class = "gender-label" })
                                            <div class="form-group-label">
                                                <div class='input-group' id='datetime1'>
                                                    @Html.TextBoxFor(x => x.CoverStartDate, new { @class = "form-control", @placeholder = "Cover Start Date", @readonly = "readonly" })
                                                    <span class="input-group-addon">
                                                        <span class="glyphicon glyphicon-calendar "></span>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(x => x.CoverStartDate, "", new { @class = "text-danger" })
                                            </div>
                                           
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.CoverEndDate, new { @class = "gender-label" })
                                            <div class="form-group-label">
                                                <div class='input-group' id='datetime2'>
                                                    @Html.TextBoxFor(x => x.CoverEndDate, new { @class = "form-control", @placeholder = "Cover End Date", @readonly = "readonly" })
                                                    <span class="input-group-addon">
                                                        <span class="glyphicon glyphicon-calendar "></span>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(x => x.CoverEndDate, "", new { @class = "text-danger" })
                                            </div>                                        
                                        </div>
                                    </div>

                                </div>
                                <div class="row" id="dlVrnnumber">
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.RegistrationNo, new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.RegistrationNo, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Registration Number", @Id = "RegistrationNo", @readonly = "readonly" })
                                            @Html.ValidationMessageFor(x => x.RegistrationNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-md-6 form-group-text">
                                        @*<div class="form-group">
                                                @Html.LabelFor(x => x.CoverStartDate, new { @class = "gender-label" })
                                                @Html.TextBoxFor(x => x.CoverStartDate, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Registration Number", @Id = "RegistrationNo" })
                                            </div>*@
                                    </div>
                                </div>

                                <fieldset disabled>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.ClaimantName, new { @class = "gender-label" })
                                                @Html.TextBoxFor(x => x.ClaimantName, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Claimant Name" })
                                                @Html.ValidationMessageFor(x => x.ClaimantName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.DateOfLoss, new { @class = "gender-label" })
                                                <div class="form-group-label">
                                                    <div class='input-group' id='datetime3'>
                                                        @Html.TextBoxFor(x => x.DateOfLoss, new { @class = "form-control", @placeholder = "Date Of Loss" })
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar "></span>
                                                        </span>
                                                    </div>
                                                    @Html.ValidationMessageFor(x => x.DateOfLoss, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.PlaceOfLoss, new { @class = "gender-label" })
                                                @Html.TextBoxFor(x => x.PlaceOfLoss, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Place" })
                                                @Html.ValidationMessageFor(x => x.PlaceOfLoss, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.DescriptionOfLoss, new { @class = "gender-label" })
                                                @Html.TextBoxFor(x => x.DescriptionOfLoss, new { @class = "form-control", @autocomplete = "off", @placeholder = "Description" })
                                                @Html.ValidationMessageFor(x => x.DescriptionOfLoss, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.EstimatedValueOfLoss, new { @class = "gender-label" })
                                                @Html.TextBoxFor(x => x.EstimatedValueOfLoss, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Estimated Value" })
                                                @Html.ValidationMessageFor(x => x.EstimatedValueOfLoss, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6 form-group-text">
                                            <div class="form-group">
                                                <label class="radio-label">Third Party Involvement(Y/N)</label>
                                                <div class="form-group-radio">
                                                    <label>@Html.RadioButtonFor(x => x.ThirdPartyInvolvement, true)Yes</label>
                                                    <label>@Html.RadioButtonFor(x => x.ThirdPartyInvolvement, false)No</label>
                                                    @Html.ValidationMessageFor(x => x.ThirdPartyInvolvement, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="thirdparty" id="InvolvementthirdParty">
                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.ThirdPartyName, new { @class = "gender-label" })
                                                    @Html.TextBoxFor(x => x.ThirdPartyName, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Third Party Name" })
                                                    <span id="spthirdPartyName"></span>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.ThirdPartyContactDetails, new { @class = "gender-label" })
                                                    @Html.TextBoxFor(x => x.ThirdPartyContactDetails, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Contact Details" })
                                                    <span id="spnthirdPartyContactDetails"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.ThirdPartyMakeId, new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.ThirdPartyMakeId, new SelectList(ViewBag.Makers, "MakeCode", "MakeDescription"), "Select Vehicle Make", new { @class = "form-control" })
                                                    <span id="spnthirdPartyMakeId"></span>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-select">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.ThirdPartyModelId, new { @class = "gender-label" })
                                                    @Html.DropDownListFor(x => x.ThirdPartyModelId, new SelectList(ViewBag.Model, "ModelCode", "ModelDescription"), "Select Vehicle Model", new { @class = "form-control" })
                                                    <span id="spnthirdPartyModelId"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.ThirdPartyEstimatedValueOfLoss, new { @class = "gender-label" })
                                                    @Html.TextBoxFor(x => x.ThirdPartyEstimatedValueOfLoss, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Third Party Estimat Val Of Loss" })
                                                    <span id="spnthirdPartyEstimatedValueOfLoss"></span>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-6 form-group-text">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.ThirdPartyDamageValue, new { @class = "gender-label" })
                                                    @Html.TextBoxFor(x => x.ThirdPartyDamageValue, new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Third Party Damage Value" })
                                                    <span id="spnthirdPartyDamageValue"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                                <br />
                                <div class="col-md-12 next-btn">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6">
                                            <div class="text-left">
                                                <button type="button" class="btn" onclick="window.location.href='@Url.Action("ClaimantList", "Claimant")'">Cancel</button>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-6">
                                            <div class="text-right">
                                                <button type="submit" onclick="return Validatemsg()" class="btn">Add</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" id="errmsgs" value="@errmsgs" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<script>
    $(document).ready(function () {
        $("#datetime1").datetimepicker({
            format: 'MM/D/YYYY',
            maxDate: new Date()
        });
        $("#datetime2").datetimepicker({
            format: 'MM/D/YYYY',
            maxDate: new Date()
        });
        $("#datetime3").datetimepicker({
            format: 'MM/D/YYYY',
            maxDate: new Date()
        });


        $("#ThirdPartyEstimatedValueOfLoss").keypress(function (e) {
            var keyCode = e.which;
            /*
            8 - (backspace)
            32 - (space)
            48-57 - (0-9)Numbers
            */
            if ((keyCode != 8 || keyCode == 32) && (keyCode < 48 || keyCode > 57)) {
                return false;
            }
        });

        $("#ThirdPartyDamageValue").keypress(function (e) {
            var keyCode = e.which;
            /*
            8 - (backspace)
            32 - (space)
            48-57 - (0-9)Numbers
            */
            if ((keyCode != 8 || keyCode == 32) && (keyCode < 48 || keyCode > 57)) {
                return false;
            }
        });


        var policyNumbersArray = [];

        //Getting Policy Numbers from database
        getPolicyNumbers();

        function getPolicyNumbers() {
            debugger
            $.ajax({
                url: "/Claimant/GetAutoSuggestions",
                type: "GET",
                async: false,
                dataType: "json",
                success: function (data) {
                    debugger;

                    for (var i = 0; i < data.length; i++) {
                        policyNumbersArray.push(data[i].PolicyNumber + "," + data[i].VRNNumber + "," + data[i].CustomerName);
                    }



                }
            })
        };

        $("#txtPolicyNumber").autocomplete({
            source: policyNumbersArray
        });

        if ($("#errmsgs").val() == "Date of Loss Not Exist in Policy Period") {
            alert("Date of Loss Not Exist in Policy Period");
        }
        //page load hide
        $("#InvolvementthirdParty").hide();
        //$("#dlVrnnumber").hide();




        $("#DateOfLoss").focusout(function () {
            debugger;
            $("#DateOfLoss").val();
            $("#CoverStartDate").val();
            $("#CoverEndDate").val();

            $.ajax({
                url: "/Claimant/GetPolicydate",
                async: false,
                data: { Datelose: $("#DateOfLoss").val(), StartDate: $("#CoverStartDate").val(), EndDate: $("#CoverEndDate").val() },
                success: function (data) {
                    if (data == true) {
                        toastr.success("You Claim is Approved")
                        $("#dateValidte").val(data)
                        return true;
                    }
                    else {
                        toastr.warning("You Date of Lose outside Of Insurance Period  ")
                        $("#dateValidte").val(data)
                        return false;
                    }


                }

            });
        });

        //validation focusout
        $("#ThirdPartyName").focusout(function () {
            debugger;
            if ($("#ThirdPartyName").val() == "") {
                $("#spthirdPartyName").text("This is Required Field").css("color", "#a94442");

            }
            else if ($("#ThirdPartyName").val() != "") {
                $("#spthirdPartyName").hide();
            }
        })



        $("#ThirdPartyContactDetails").focusout(function () {
            debugger;
            if ($("#ThirdPartyContactDetails").val() == "") {
                $("#spnthirdPartyContactDetails").text("This is Required Field").css("color", "#a94442");

            }
            else if ($("#ThirdPartyContactDetails").val() != "") {
                $("#spnthirdPartyContactDetails").hide();
            }
        })

        $("#ThirdPartyMakeId").focusout(function () {
            debugger;
            if ($("#ThirdPartyMakeId").val() == "") {
                $("#spnthirdPartyMakeId").text("This is Required Field").css("color", "#a94442");

            }
            else if ($("#ThirdPartyMakeId").val() != "") {
                $("#spnthirdPartyMakeId").hide();
            }
        })

        $("#ThirdPartyModelId").focusout(function () {
            debugger;
            if ($("#ThirdPartyModelId").val() == "") {
                $("#spnthirdPartyModelId").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            else if ($("#ThirdPartyModelId").val() != "") {
                $("#spnthirdPartyModelId").hide();
            }
        })



        $("#ThirdPartyModelId").focusout(function () {
            debugger;
            if ($("#ThirdPartyModelId").val() == "") {
                $("#spnthirdPartyModelId").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            else if ($("#ThirdPartyModelId").val() != "") {
                $("#spnthirdPartyModelId").hide();
            }
        })


        $("#ThirdPartyEstimatedValueOfLoss").focusout(function () {
            debugger;
            if ($("#ThirdPartyEstimatedValueOfLoss").val() == "") {
                $("#spnthirdPartyEstimatedValueOfLoss").text("This is Required Field").css("color", "#a94442");

            }
            else if ($("#ThirdPartyEstimatedValueOfLoss").val() != "") {
                $("#spnthirdPartyEstimatedValueOfLoss").hide();
            }
        })
        $("#ThirdPartyDamageValue").focusout(function () {
            debugger;
            if ($("#ThirdPartyDamageValue").val() == "") {
                $("#spnthirdPartyDamageValue").text("This is Required Field").css("color", "#a94442");

            }
            else if ($("#ThirdPartyDamageValue").val() != "") {
                $("#spnthirdPartyDamageValue").hide();
            }
        })

    });




    $('input:radio[name = "ThirdPartyInvolvement"]').change(

    function () {
        debugger;
        if ($(this).is(':checked') && $(this).val() == "True") {
            debugger;
            $("#InvolvementthirdParty").show();


        }
        else {
            $("#InvolvementthirdParty").hide();
        }
    });

    function Validatemsg() {
        debugger;

        if ($("#ThirdPartyInvolvement").is(":checked") == true) {

            if ($("#ThirdPartyName").val() == "") {
                $("#spthirdPartyName").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            if ($("#ThirdPartyContactDetails").val() == "") {
                $("#spnthirdPartyContactDetails").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            if ($("#ThirdPartyMakeId").val() == "") {
                $("#spnthirdPartyMakeId").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            if ($("#ThirdPartyModelId").val() == "") {
                $("#spnthirdPartyModelId").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            if ($("#ThirdPartyEstimatedValueOfLoss").val() == "") {
                $("#spnthirdPartyEstimatedValueOfLoss").text("This is Required Field").css("color", "#a94442");
                return false;
            }
            if ($("#ThirdPartyDamageValue").val()=="") {
                $("#spnthirdPartyDamageValue").text("This is Required Field").css("color", "#a94442");
                return false;
            }
        }
        if ($("#dateValidte").val() == 'false') {
            toastr.warning("You Date of Lose outside Of Insurance Period  ")
            return false;
        }
    }

    //$("#txtPolicyNumber").change(function () {
    //    debugger;

    //    $("#txtPolicyNumber").val();
    //    $.ajax({
    //        url: "/Claimant/GetCustomername",
    //        async: false,
    //        data: { txtvalue: $("#txtPolicyNumber").val() },
    //        success: function (data) {
    //            debugger;


    //            $("#CustomerName").val(data.CustomerName);
    //            $("#PolicyNumber").val(data.PolicyNumber);
    //            $("#RegistrationNo").val(data.RegistrationNo);
    //            $("#CoverStartDate").val(ToJavaScriptDate(data.CoverStartDate));
    //            $("#CoverEndDate").val(ToJavaScriptDate(data.CoverEndDate));
    //            if (data.CustomerName != null && data.PolicyNumber != null && data.RegistrationNo != null) {
    //                $("fieldset").removeAttr("disabled");
    //            }
    //            else {
    //                $("fieldset").removeAttr("disabled");
    //            }
    //        },
    //        error: function (error) {
    //            debugger;
    //            alert("error");
    //        }
    //    })


    //});

    $("#txtPolicyNumber").blur(function () {
        debugger;

        $("#txtPolicyNumber").val();
        $.ajax({
            url: "/Claimant/GetCustomername",
            async: false,
            data: { txtvalue: $("#txtPolicyNumber").val() },
            success: function (data) {
                debugger;


                $("#CustomerName").val(data.CustomerName);
                $("#PolicyNumber").val(data.PolicyNumber);
                $("#RegistrationNo").val(data.RegistrationNo);

                if (data.CustomerName != null && data.PolicyNumber != null && data.RegistrationNo != null) {
                    $("#CoverStartDate").val(ToJavaScriptDate(data.CoverStartDate));
                    $("#CoverEndDate").val(ToJavaScriptDate(data.CoverEndDate));
                    toastr.success("You Policy No/VRN No/Customer Name Is  Exist.")
                    $("fieldset").removeAttr("disabled");

                }
                else {
                    ($("fieldset").attr("disabled"));
                    toastr.warning("You Policy No/VRN No/Customer Name Is Not Exist. Please Try Again")
                    return false;
                }
            },
            error: function (error) {
                debugger;
                alert("error");
            }
        })


    });



    function ToJavaScriptDate(value) {
        debugger;
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        //return dt.getDate() + "/" + (dt.getMonth() + 1) + "/" + dt.getFullYear();
        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    }

    //function ConvertJsonDate(date) {
    //    debugger;
    //    var CAdate = date;
    //    var nowDate = new Date(parseInt(CAdate.substr(6)));
    //    var result = "";
    //    result = nowDate.format("dd/mm/yyyy");
    //    var mm = result.getMonth() + 1; //January is 0!

    //    var yyyy = result.getFullYear();
    //    if (dd < 10) {
    //        dd = '0' + dd;
    //    }
    //    if (mm < 10) {
    //        mm = '0' + mm;
    //    }
    //    var today = mm + '/' + dd + '/' + yyyy;

    //}





    $("#ThirdPartyMakeId").change(function () {
        debugger;
        GetVehicleModels("");
    });



    function GetVehicleModels(ModelName) {
        $.ajax({
            url: "@Url.Action("GetVehicleModel", "Claimant")",
            type: "POST",
            data: { makeCode: $("#ThirdPartyMakeId").val() },
            dataType: "json",
            success: function (result) {
                debugger;
                var $dropdown = $("#ThirdPartyModelId");
                $dropdown.empty();
                $.each(result, function () {
                    debugger;
                    $dropdown.append($("<option />").val(this.ModelCode).text(this.ModelDescription));
                });
                if (ModelName != "") {
                    debugger;

                    $("#ThirdPartyModelId option").filter(function () { return this.text == ModelName.toUpperCase(); }).attr('selected', true);
                }
            }
        });
    }



</script>
